name: Android tests

on:
  push:
    branches: [ "master" ]  # runs when you commit to the master branch,
      # so also when merging pull requests.
    # Not on receiving pull requests: it would be a waste
jobs:
  # this job runs all the tests
  test_on_android:
    if: github.repository == 'spacecowboy/NotePad' # no need to run it on forks
    timeout-minutes: 40
    continue-on-error: true # run them all even if one fails
    strategy:
      matrix:
        # test on emulators with these Android API versions (minSdk, average, targetSdk)
        api-level: [ 23, 28, 31, 33 ]
        # Windows is not supported. Full list of installed software:
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-12-Readme.md
        os: [ ubuntu-latest, macos-latest ]
        target: [ default, google_apis ] # without or with google APIs
    runs-on: ${{ matrix.os }}
    env:
      ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 500
    permissions:
      contents: read
    steps:
      - name: perform the checkout
        uses: actions/checkout@v3

      - name: perform the validation
        continue-on-error: true
        uses: gradle/wrapper-validation-action@v1

      - name: perform the set up for the JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
          # cache: gradle # this step should not cache gradle # TODO maybe it should ?

      - name: perform Gradle setup & caching
        uses: gradle/gradle-build-action@v2

      - name: Check for hardware acceleration availability
        # ignore return codes. Read the console for the result. It's either available
        # or not. There's nothing you can do. No you can't install HAXM.
        continue-on-error: true
        run: |
          which emulator
          emulator -accel-check
          $ANDROID_HOME/emulator/emulator -accel-check
          $ANDROID_HOME/tools/emulator -accel-check
          echo "done"

      - name: perform AVD caching
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.os }}-${{ matrix.target }}

      - name: create AVD and generate snapshot for caching
        # here it automatically installs the needed android SDK components
        # see https://github.com/ReactiveCircus/android-emulator-runner/blob/main/README.md
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          profile: 5.4in FWVGA  # low resolution => faster
          arch: x86_64          # faster
          disk-size: 800M       # for saving org and json files
          force-avd-creation: false
          # you need these parameters to make it work
          emulator-options: -gpu swiftshader_indirect -no-boot-anim -no-window          
          disable-animations: true
          # starts the emulator, runs this script, then closes the emulator
          script: |
            # wait for it to finish booting, then take a screenshot
            sleep 25
            adb emu screenrecord screenshot ./screenshot-made-cache.png

      - name: perform the Gradle build
        run: ./gradlew build

      - name: install ffmpeg # a command for each OS
        continue-on-error: true
        run: |
          brew install ffmpeg || true
          sudo apt install ffmpeg  || true
          ffmpeg -version

      - name: make the emulator script executable
        run: chmod +x github_on_emu_started.sh

      - name: run the tests
        # note that by now the app is already built
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: 5.4in FWVGA
          disk-size: 800M
          force-avd-creation: false
          disable-animations: true
          emulator-options: -no-snapshot-save -verbose -no-boot-anim -gpu swiftshader_indirect -no-window
          script: bash ./github_on_emu_started.sh

# upload results

      - name: upload the video and screenshots
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: media-${{ matrix.target }}-api${{ matrix.api-level }}-${{ matrix.os }}
          path: |
            screenshot-desktop.jpg             
            screenshot-made-cache.png
            screenshot-emu-tests-starting.png            
            emu-video.mp4

      - name: Upload detailed test reports
        # because the printed out stacktrace (console) is too short
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: reports-${{ matrix.target }}-api${{ matrix.api-level }}-${{ matrix.os }}
          path: app/build/reports/androidTests/connected/**
